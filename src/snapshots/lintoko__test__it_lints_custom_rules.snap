---
source: src/lib.rs
expression: lint_output
---
  × [ERROR]: no-result
   ╭─[<input_path>:1:1]
 1 │ import Result "mo:base/Result";
   · ───────────────┬──────────────
   ·                ╰── Do not use the Result pattern. Use Runtime.trap() instead.
 2 │ import OrderedMap "mo:base/OrderedMap";
   ╰────

  × [ERROR]: shared-caller
   ╭─[<input_path>:5:8]
 4 │ 
 5 │ shared (msg) actor class() {
   ·        ──┬──
   ·          ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 6 │   func letElse() {
   ╰────

  × [ERROR]: only-persistent-actor
   ╭─[<input_path>:5:14]
 4 │ 
 5 │ shared (msg) actor class() {
   ·              ──┬──
   ·                ╰── Only use persistent actors. Change `actor` to `persistent actor`.
 6 │   func letElse() {
   ╰────

  × [ERROR]: no-let-else
   ╭─[<input_path>:7:5]
 6 │   func letElse() {
 7 │     let ?x = null else { return };
   ·     ──────────────┬──────────────
   ·                   ╰── Do not use let-else. Use a switch instead.
 8 │   };
   ╰────

  × [ERROR]: no-flexible
    ╭─[<input_path>:10:3]
  9 │ 
 10 │   flexible let flexibleLet = 42;
    ·   ────┬───
    ·       ╰── Do not use the `flexible` keyword. Use `transient` instead.
 11 │   stable let stableLet = 42;
    ╰────

  × [ERROR]: no-stable
    ╭─[<input_path>:11:3]
 10 │   flexible let flexibleLet = 42;
 11 │   stable let stableLet = 42;
    ·   ───┬──
    ·      ╰── Do not use the `stable` keyword. It's implicit when using persistent actors.
 12 │ 
    ╰────

  × [ERROR]: shared-caller
    ╭─[<input_path>:15:16]
 14 │ 
 15 │   public shared(msg) func sharedCaller() {};
    ·                ──┬──
    ·                  ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 16 │   public shared msg func sharedCallerVar() {};
    ╰────

  × [ERROR]: shared-caller
    ╭─[<input_path>:16:17]
 15 │   public shared(msg) func sharedCaller() {};
 16 │   public shared msg func sharedCallerVar() {};
    ·                 ─┬─
    ·                  ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 17 │   public shared ({ caller }) func sharedCallerPat() {};
    ╰────

  × [ERROR]: transient-usage
    ╭─[<input_path>:21:3]
 20 │   transient let transientMap = OrderedMap.Make<Nat>(Nat.compare);
 21 │   transient let transientMap = OrderedMap.Make.Well<Nat>(Nat.compare);
    ·   ─────────────────────────────────┬─────────────────────────────────
    ·                                    ╰── Only use `transient` for OrderedMap.Make, OrderedSet.Make, and Random.Finite
 22 │ 
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:23:3]
 22 │ 
 23 │   x := 1 + x;
    ·   ─────┬────
    ·        ╰── Use `x += 1` instead of reassigning the variable.
 24 │   x := x + 2;
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:24:3]
 23 │   x := 1 + x;
 24 │   x := x + 2;
    ·   ─────┬────
    ·        ╰── Use `x += 2` instead of reassigning the variable.
 25 │   x := x - 1;
    ╰────

  × [ERROR]: assign-minus
    ╭─[<input_path>:25:3]
 24 │   x := x + 2;
 25 │   x := x - 1;
    ·   ─────┬────
    ·        ╰── Use `x -= 1` instead of reassigning the variable
 26 │   x := 1 - x;
    ╰────

  × [ERROR]: pun-fields
    ╭─[<input_path>:28:13]
 27 │ 
 28 │   let _ = { field = field };
    ·             ──────┬──────
    ·                   ╰── Use field punning to to avoid repetition: Replace `{ field = field }` with `{ field }`
 29 │ }
    ╰────
