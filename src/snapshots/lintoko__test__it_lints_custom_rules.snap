---
source: src/lib.rs
expression: lint_output
---
  × [ERROR]: no-result
   ╭─[<input_path>:1:1]
 1 │ import Result "mo:base/Result";
   · ───────────────┬──────────────
   ·                ╰── Do not use the Result pattern. Use Runtime.trap() instead.
 2 │ import OrderedMap "mo:base/OrderedMap";
   ╰────

  × [ERROR]: no-pure-data-structures
   ╭─[<input_path>:3:1]
 2 │ import OrderedMap "mo:base/OrderedMap";
 3 │ import PureList "mo:core/pure/List";
   · ─────────────────┬─────────────────
   ·                  ╰── Do not use data structures from pure/*. Use imperative structures instead.
 4 │ 
   ╰────

  × [ERROR]: shared-caller
   ╭─[<input_path>:5:8]
 4 │ 
 5 │ shared (msg) actor class() {
   ·        ──┬──
   ·          ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 6 │   func letElse() {
   ╰────

  × [ERROR]: no-let-else
   ╭─[<input_path>:7:5]
 6 │   func letElse() {
 7 │     let ?x = null else { return };
   ·     ──────────────┬──────────────
   ·                   ╰── Do not use let-else. Use a switch instead.
 8 │   };
   ╰────

  × [ERROR]: no-flexible
    ╭─[<input_path>:10:3]
  9 │ 
 10 │   flexible let flexibleLet = 42;
    ·   ────┬───
    ·       ╰── Do not use the `flexible` keyword. Use `transient` instead.
 11 │   stable let stableLet = 42;
    ╰────

  × [ERROR]: no-stable
    ╭─[<input_path>:11:3]
 10 │   flexible let flexibleLet = 42;
 11 │   stable let stableLet = 42;
    ·   ───┬──
    ·      ╰── Do not use the `stable` keyword. It's implicit when using persistent actors.
 12 │ 
    ╰────

  × [ERROR]: shared-caller
    ╭─[<input_path>:15:16]
 14 │ 
 15 │   public shared(msg) func sharedCaller() {};
    ·                ──┬──
    ·                  ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 16 │   public shared msg func sharedCallerVar() {};
    ╰────

  × [ERROR]: shared-caller
    ╭─[<input_path>:16:17]
 15 │   public shared(msg) func sharedCaller() {};
 16 │   public shared msg func sharedCallerVar() {};
    ·                 ─┬─
    ·                  ╰── Do not use `shared(msg)`. Use `shared({ caller })` instead.
 17 │   public shared ({ caller }) func sharedCallerPat() {};
    ╰────

  × [ERROR]: transient-usage
    ╭─[<input_path>:21:3]
 20 │   transient let transientMap = OrderedMap.Make<Nat>(Nat.compare);
 21 │   transient let transientMap = OrderedMap.Make.Well<Nat>(Nat.compare);
    ·   ─────────────────────────────────┬─────────────────────────────────
    ·                                    ╰── Only use `transient` for OrderedMap.Make, OrderedSet.Make, and Random.Finite
 22 │ 
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:23:3]
 22 │ 
 23 │   x := 1 + x;
    ·   ─────┬────
    ·        ╰── Use `x += 1` instead of reassigning the variable.
 24 │   x := x + 2;
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:24:3]
 23 │   x := 1 + x;
 24 │   x := x + 2;
    ·   ─────┬────
    ·        ╰── Use `x += 2` instead of reassigning the variable.
 25 │ 
    ╰────

  × [ERROR]: assign-minus
    ╭─[<input_path>:26:3]
 25 │ 
 26 │   x := x - 1;
    ·   ─────┬────
    ·        ╰── Use `x -= 1` instead of reassigning the variable
 27 │   x := 1 - x;
    ╰────

  × [ERROR]: assign-multiply
    ╭─[<input_path>:29:3]
 28 │ 
 29 │   x := x * 1;
    ·   ─────┬────
    ·        ╰── Use `x *= 1` instead of reassigning the variable.
 30 │   x := 1 * x;
    ╰────

  × [ERROR]: assign-multiply
    ╭─[<input_path>:30:3]
 29 │   x := x * 1;
 30 │   x := 1 * x;
    ·   ─────┬────
    ·        ╰── Use `x *= 1` instead of reassigning the variable.
 31 │ 
    ╰────

  × [ERROR]: assign-divide
    ╭─[<input_path>:32:3]
 31 │ 
 32 │   x := x / 1;
    ·   ─────┬────
    ·        ╰── Use `x /= 1` instead of reassigning the variable
 33 │   x := 1 / x;
    ╰────

  × [ERROR]: assign-concat
    ╭─[<input_path>:35:3]
 34 │ 
 35 │   x := x # "1";
    ·   ──────┬─────
    ·         ╰── Use `x #= "1"` instead of reassigning the variable
 36 │   x := "1" # x;
    ╰────

  × [ERROR]: pun-fields
    ╭─[<input_path>:38:13]
 37 │ 
 38 │   let _ = { field = field };
    ·             ──────┬──────
    ·                   ╰── Use field punning to to avoid repetition: Replace `{ field = field }` with `{ field }`
 39 │   let _ = { var dontPun = dontPun };
    ╰────

  × [ERROR]: no-bool-switch
    ╭─[<input_path>:40:11]
 39 │       let _ = { var dontPun = dontPun };
 40 │ ╭─▶   let _ = switch _ {
 41 │ │       case (false) {};
 42 │ │       case (true) {};
 43 │ ├─▶   };
    · ╰──── Don't switch on boolean values, use if instead
 44 │       let _ = switch _ {
    ╰────

  × [ERROR]: no-bool-switch
    ╭─[<input_path>:44:11]
 43 │       };
 44 │ ╭─▶   let _ = switch _ {
 45 │ │       case true {};
 46 │ │       case false {};
 47 │ ├─▶   };
    · ╰──── Don't switch on boolean values, use if instead
 48 │     
    ╰────

  × [ERROR]: only-return-primitives
    ╭─[<input_path>:54:47]
 53 │ 
 54 │   public func listReturningFunction() : async List<Text> {
    ·                                               ─────┬────
    ·                                                    ╰── Only return primitive types from publicly exposed endpoints
 55 │     null
    ╰────

  × [ERROR]: only-return-primitives
    ╭─[<input_path>:57:46]
 56 │   };
 57 │   public func setReturningFunction() : async Set.Set<Text> {
    ·                                              ──────┬──────
    ·                                                    ╰── Only return primitive types from publicly exposed endpoints
 58 │     null
    ╰────

  × [ERROR]: only-return-primitives
    ╭─[<input_path>:60:46]
 59 │   };
 60 │   public func mapReturningFunction() : async Map.Map<Text, Nat> {
    ·                                              ─────────┬────────
    ·                                                       ╰── Only return primitive types from publicly exposed endpoints
 61 │     null
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:73:5]
 72 │   func unneededReturn() {
 73 │     return 10
    ·     ────┬────
    ·         ╰── unneeded return statement. You can remove the `return`
 74 │   };
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:75:27]
 74 │   };
 75 │   func unneededReturn() = return 10;
    ·                           ────┬────
    ·                               ╰── unneeded return statement. You can remove the `return`
 76 │ 
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:79:7]
 78 │     if (true) {
 79 │       return 4;
    ·       ────┬───
    ·           ╰── unneeded return statement. You can remove the `return`
 80 │     } else {
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:86:15]
 85 │   func unneededReturn() {
 86 │     if (true) return 4
    ·               ────┬───
    ·                   ╰── unneeded return statement. You can remove the `return`
 87 │     else {
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:95:14]
 94 │     switch (true) {
 95 │       case 1 return 40;
    ·              ────┬────
    ·                  ╰── unneeded return statement. You can remove the `return`
 96 │       case 2 { return 40; };
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:96:16]
 95 │       case 1 return 40;
 96 │       case 2 { return 40; };
    ·                ────┬────
    ·                    ╰── unneeded return statement. You can remove the `return`
 97 │     };
    ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:100:8]
  99 │ 
 100 │   type lowerCase = Nat;
     ·        ────┬────
     ·            ╰── Types should be capitalized and use CamelCase.
 101 │   type Snake_case = Nat;
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:101:8]
 100 │   type lowerCase = Nat;
 101 │   type Snake_case = Nat;
     ·        ─────┬────
     ·             ╰── Types should be capitalized and use CamelCase.
 102 │   type CamelCase<lowerCase, Snake_case> = Nat;
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:102:18]
 101 │   type Snake_case = Nat;
 102 │   type CamelCase<lowerCase, Snake_case> = Nat;
     ·                  ────┬────
     ·                      ╰── Types should be capitalized and use CamelCase.
 103 │   type CamelCase = Nat;
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:102:29]
 101 │   type Snake_case = Nat;
 102 │   type CamelCase<lowerCase, Snake_case> = Nat;
     ·                             ─────┬────
     ·                                  ╰── Types should be capitalized and use CamelCase.
 103 │   type CamelCase = Nat;
     ╰────

  × [ERROR]: case-functions
     ╭─[<input_path>:105:8]
 104 │ 
 105 │   func UpperCase() {};
     ·        ────┬────
     ·            ╰── Functions should start lower case and use camelCase.
 106 │   func snake_case() {};
     ╰────

  × [ERROR]: case-functions
     ╭─[<input_path>:106:8]
 105 │   func UpperCase() {};
 106 │   func snake_case() {};
     ·        ─────┬────
     ·             ╰── Functions should start lower case and use camelCase.
 107 │   func _hiddenIsFine() {};
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:108:9]
 107 │   func _hiddenIsFine() {};
 108 │   class lowerCase() {};
     ·         ────┬────
     ·             ╰── Types should be capitalized and use CamelCase.
 109 │   class Snake_Cased_ish() {};
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:109:9]
 108 │   class lowerCase() {};
 109 │   class Snake_Cased_ish() {};
     ·         ───────┬───────
     ·                ╰── Types should be capitalized and use CamelCase.
 110 │   class CamelCase<lowerCase, Snake_case>() {};
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:110:19]
 109 │   class Snake_Cased_ish() {};
 110 │   class CamelCase<lowerCase, Snake_case>() {};
     ·                   ────┬────
     ·                       ╰── Types should be capitalized and use CamelCase.
 111 │   class CamelCase<Camel, Case>() {};
     ╰────

  × [ERROR]: case-types
     ╭─[<input_path>:110:30]
 109 │   class Snake_Cased_ish() {};
 110 │   class CamelCase<lowerCase, Snake_case>() {};
     ·                              ─────┬────
     ·                                   ╰── Types should be capitalized and use CamelCase.
 111 │   class CamelCase<Camel, Case>() {};
     ╰────
