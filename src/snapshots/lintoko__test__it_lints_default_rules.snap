---
source: src/lib.rs
expression: lint_output
---
  × [ERROR]: only-persistent-actor
   ╭─[<input_path>:5:14]
 4 │ 
 5 │ shared (msg) actor class() {
   ·              ──┬──
   ·                ╰── Only use persistent actors. Change `actor` to `persistent actor`.
 6 │   func letElse() {
   ╰────

  × [ERROR]: no-flexible
    ╭─[<input_path>:10:3]
  9 │ 
 10 │   flexible let flexibleLet = 42;
    ·   ────┬───
    ·       ╰── Do not use the `flexible` keyword. Use `transient` instead.
 11 │   stable let stableLet = 42;
    ╰────

  × [ERROR]: no-stable
    ╭─[<input_path>:11:3]
 10 │   flexible let flexibleLet = 42;
 11 │   stable let stableLet = 42;
    ·   ───┬──
    ·      ╰── Do not use the `stable` keyword. It's implicit when using persistent actors.
 12 │ 
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:23:3]
 22 │ 
 23 │   x := 1 + x;
    ·   ─────┬────
    ·        ╰── Use `x += 1` instead of reassigning the variable.
 24 │   x := x + 2;
    ╰────

  × [ERROR]: assign-plus
    ╭─[<input_path>:24:3]
 23 │   x := 1 + x;
 24 │   x := x + 2;
    ·   ─────┬────
    ·        ╰── Use `x += 2` instead of reassigning the variable.
 25 │   x := x - 1;
    ╰────

  × [ERROR]: assign-minus
    ╭─[<input_path>:25:3]
 24 │   x := x + 2;
 25 │   x := x - 1;
    ·   ─────┬────
    ·        ╰── Use `x -= 1` instead of reassigning the variable
 26 │   x := 1 - x;
    ╰────

  × [ERROR]: pun-fields
    ╭─[<input_path>:28:13]
 27 │ 
 28 │   let _ = { field = field };
    ·             ──────┬──────
    ·                   ╰── Use field punning to to avoid repetition: Replace `{ field = field }` with `{ field }`
 29 │   let _ = switch _ {
    ╰────

  × [ERROR]: no-bool-switch
    ╭─[<input_path>:29:11]
 28 │       let _ = { field = field };
 29 │ ╭─▶   let _ = switch _ {
 30 │ │       case (false) {};
 31 │ │       case (true) {};
 32 │ ├─▶   };
    · ╰──── Don't switch on boolean values, use if instead
 33 │       let _ = switch _ {
    ╰────

  × [ERROR]: no-bool-switch
    ╭─[<input_path>:33:11]
 32 │       };
 33 │ ╭─▶   let _ = switch _ {
 34 │ │       case true {};
 35 │ │       case false {};
 36 │ ├─▶   };
    · ╰──── Don't switch on boolean values, use if instead
 37 │     
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:57:5]
 56 │   func unneededReturn() {
 57 │     return 10
    ·     ────┬────
    ·         ╰── unneeded return statement. You can remove the `return`
 58 │   };
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:59:27]
 58 │   };
 59 │   func unneededReturn() = return 10;
    ·                           ────┬────
    ·                               ╰── unneeded return statement. You can remove the `return`
 60 │ 
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:63:7]
 62 │     if (true) {
 63 │       return 4;
    ·       ────┬───
    ·           ╰── unneeded return statement. You can remove the `return`
 64 │     } else {
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:70:15]
 69 │   func unneededReturn() {
 70 │     if (true) return 4
    ·               ────┬───
    ·                   ╰── unneeded return statement. You can remove the `return`
 71 │     else {
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:79:14]
 78 │     switch (true) {
 79 │       case 1 return 40;
    ·              ────┬────
    ·                  ╰── unneeded return statement. You can remove the `return`
 80 │       case 2 { return 40; };
    ╰────

  × [ERROR]: unneeded-return
    ╭─[<input_path>:80:16]
 79 │       case 1 return 40;
 80 │       case 2 { return 40; };
    ·                ────┬────
    ·                    ╰── unneeded return statement. You can remove the `return`
 81 │     };
    ╰────
